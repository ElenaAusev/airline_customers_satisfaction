Elena Ausevičiūtė - PROJEKTAS.ipynb_
[ ]
import pandas as duomenys
duomenys = duomenys.read_csv('airline_passenger_satisfaction.csv')

[ ]
import matplotlib.pyplot as plt
Duomenų importavimas / tvarkymas

[ ]
duomenys.shape
(129880, 24)

[ ]
duomenys = duomenys.drop(columns=['Departure Delay', 'Arrival Delay', 'Gate Location'])

[ ]
duomenys.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 129880 entries, 0 to 129879
Data columns (total 21 columns):
 #   Column                                  Non-Null Count   Dtype 
---  ------                                  --------------   ----- 
 0   ID                                      129880 non-null  int64 
 1   Gender                                  129880 non-null  object
 2   Age                                     129880 non-null  int64 
 3   Customer Type                           129880 non-null  object
 4   Type of Travel                          129880 non-null  object
 5   Class                                   129880 non-null  object
 6   Flight Distance                         129880 non-null  int64 
 7   Departure and Arrival Time Convenience  129880 non-null  int64 
 8   Ease of Online Booking                  129880 non-null  int64 
 9   Check-in Service                        129880 non-null  int64 
 10  Online Boarding                         129880 non-null  int64 
 11  On-board Service                        129880 non-null  int64 
 12  Seat Comfort                            129880 non-null  int64 
 13  Leg Room Service                        129880 non-null  int64 
 14  Cleanliness                             129880 non-null  int64 
 15  Food and Drink                          129880 non-null  int64 
 16  In-flight Service                       129880 non-null  int64 
 17  In-flight Wifi Service                  129880 non-null  int64 
 18  In-flight Entertainment                 129880 non-null  int64 
 19  Baggage Handling                        129880 non-null  int64 
 20  Satisfaction                            129880 non-null  object
dtypes: int64(16), object(5)
memory usage: 20.8+ MB

[ ]
duomenys.head(20)

[ ]
duomenys.iloc[90000:90020]

[ ]
duomenys.tail(20)

[ ]
duomenys['countas'] = 1


1 - Klientų pasiskirstymas pagal amžių, lytį

[ ]
duomenys.groupby('Gender').count()['countas'].reset_index()


[ ]
def sukurti_amziaus_grupe(eilute):
  if eilute['Age'] < 12:
    return '0 - 12m'
  elif eilute['Age'] < 18:
    return '12 - 18m'
  elif eilute['Age'] < 25:
    return '18 - 25m'
  elif eilute['Age'] < 35:
    return '25 - 35m'
  elif eilute['Age'] < 45:
    return '35 - 45m'
  elif eilute['Age'] < 55:
    return '45 - 55m'
  elif eilute['Age'] < 65:
    return '55 - 65m'
  else:
    return 'Virš 65m'

duomenys['amziaus_grupe'] = duomenys.apply(sukurti_amziaus_grupe, axis=1)
duomenys

[ ]
amzius = duomenys.groupby('amziaus_grupe').count()['countas']
plt.pie(amzius, labels=amzius.keys(),autopct='%.2f%%')
plt.title('Klientų amžius')
plt.show()


[ ]
amzius = duomenys.groupby('amziaus_grupe').count()['countas'].reset_index()
stulpelis = plt.bar(amzius['amziaus_grupe'], amzius['countas'], color='#c0e366',edgecolor='#8ca649')
plt.xticks(rotation=45,ha='right')
plt.title('Klientų amžius')
plt.show()


[ ]
amzius = duomenys.groupby('amziaus_grupe')['Gender'].value_counts().reset_index()
amzius


[ ]
amzius.reset_index(drop=True, inplace = True)
amzius.to_csv('amzius_lytis.csv', index=False)

[ ]
amz = amzius['amziaus_grupe'].unique()
vyras = amzius['count'].loc[amzius['Gender'] == 'Male']
moteris = amzius['count'].loc[amzius['Gender'] == 'Female']

plt.plot(amz, vyras, color='#36c9cf', label='Vyrai', marker='.')
plt.plot(amz,moteris, color = '#c934b6', label='Moterys', marker='.')

plt.legend()
plt.title('Pasiskirstymas pagal lytį ir amžių')
plt.xticks(rotation=30, ha='right')

plt.show()


[ ]
duomenys['Class'].unique()
array(['Business', 'Economy', 'Economy Plus'], dtype=object)

[ ]
pagal_klase = duomenys.groupby('Class')[['amziaus_grupe', 'Gender']].value_counts().reset_index()
pagal_klase


[ ]
pagal_klase.reset_index(drop=True, inplace = True)
pagal_klase.to_csv('pagal_klase.csv', index=False)

[ ]
import numpy as np
a = duomenys['amziaus_grupe'].unique()
m_b = pagal_klase.loc[(pagal_klase['Class'] == 'Business')&(pagal_klase['Gender'] == 'Female')].groupby('amziaus_grupe').sum()
v_b = pagal_klase.loc[(pagal_klase['Class'] == 'Business')&(pagal_klase['Gender'] == 'Male')].groupby('amziaus_grupe').sum()

a= np.arange(8)
width=0.30

plt.bar(a, m_b['count'], width = width, edgecolor='black', label='Moterys', color = '#a5f0dc', tick_label = ['0 - 12m','12 - 18m','18 - 25m','25 - 35m','35 - 45m','45 - 55m','55 - 65m','Virš 65m'])
plt.bar(a+width, v_b['count'], width = width, edgecolor='black', label='Vyrai', color = '#67a192')
plt.xticks(rotation=30, ha='right')
plt.legend()
plt.title('Biznio kl. klientai pagal amžių')
plt.show()


[ ]
a = duomenys['amziaus_grupe'].unique()
m_e = pagal_klase.loc[(pagal_klase['Class'] == 'Economy')&(pagal_klase['Gender'] == 'Female')].groupby('amziaus_grupe').sum()
v_e = pagal_klase.loc[(pagal_klase['Class'] == 'Economy')&(pagal_klase['Gender'] == 'Male')].groupby('amziaus_grupe').sum()

a= np.arange(8)
width=0.30

plt.bar(a, m_e['count'], width = width, edgecolor='black', label='Moterys', color = '#c789c9', tick_label = ['0 - 12m','12 - 18m','18 - 25m','25 - 35m','35 - 45m','45 - 55m','55 - 65m','Virš 65m'])
plt.bar(a+width, v_e['count'], width = width, edgecolor='black', label='Vyrai', color = '#5f4080')
plt.xticks(rotation=30, ha='right')
plt.legend()
plt.title('Ekonominės kl. klientai pagal amžių')
plt.show()



[ ]
a = duomenys['amziaus_grupe'].unique()
m_ep = pagal_klase.loc[(pagal_klase['Class'] == 'Economy Plus')&(pagal_klase['Gender'] == 'Female')].groupby('amziaus_grupe').sum()
v_ep = pagal_klase.loc[(pagal_klase['Class'] == 'Economy Plus')&(pagal_klase['Gender'] == 'Male')].groupby('amziaus_grupe').sum()

a= np.arange(8)
width=0.30

plt.bar(a, m_ep['count'], width = width, edgecolor='black', label='Moterys', color = '#dbbe5e', tick_label = ['0 - 12m','12 - 18m','18 - 25m','25 - 35m','35 - 45m','45 - 55m','55 - 65m','Virš 65m'])
plt.bar(a+width, v_ep['count'], width = width, edgecolor='black', label='Vyrai', color = '#7a6e46')
plt.xticks(rotation=30, ha='right')
plt.legend()
plt.title('Ekonominės plius kl. klientai pagal amžių')
plt.show()


2 - Geriausiai / blogiausiai įvertintos paslaugos

[ ]
duomenys[['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']]

[ ]
visu_vidurkis = duomenys[['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']].mean().to_frame('VIDURKIS').rename_axis('PASLAUGOS').reset_index()
visu_vidurkis


[ ]
visu_vidurkis.reset_index(drop=True, inplace = True)
visu_vidurkis.to_csv('paslaugos.csv', index=False)

[ ]
visu_vidurkis = duomenys[['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']].mean()
x = ['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']
y = visu_vidurkis
plt.plot(x, y,marker='s')
plt.xticks(rotation=45, ha='right')
plt.title('Paslaugų įvertinimo vidurkis')
plt.show()


[ ]
min_ir_max = visu_vidurkis.loc[(visu_vidurkis['VIDURKIS']  == visu_vidurkis['VIDURKIS'].max()) | (visu_vidurkis['VIDURKIS']  == visu_vidurkis['VIDURKIS'].min())]
min_ir_max


[ ]
duomenys['atskirai_vidurkis'] = (duomenys['Departure and Arrival Time Convenience']+ duomenys['Ease of Online Booking'] + duomenys['Check-in Service'] + duomenys['Online Boarding'] + duomenys['On-board Service'] + duomenys['Seat Comfort'] + duomenys ['Leg Room Service'] + duomenys['Cleanliness'] + duomenys['Food and Drink'] + duomenys['In-flight Service'] + duomenys['In-flight Wifi Service'] + duomenys['In-flight Entertainment'] + duomenys['Baggage Handling'])/13
duomenys.loc[duomenys['atskirai_vidurkis'] == 5]

[ ]
duomenys['atskirai_vidurkis'] = (duomenys['Departure and Arrival Time Convenience']+ duomenys['Ease of Online Booking'] + duomenys['Check-in Service'] + duomenys['Online Boarding'] + duomenys['On-board Service'] + duomenys['Seat Comfort'] + duomenys ['Leg Room Service'] + duomenys['Cleanliness'] + duomenys['Food and Drink'] + duomenys['In-flight Service'] + duomenys['In-flight Wifi Service'] + duomenys['In-flight Entertainment'] + duomenys['Baggage Handling'])/13
duomenys.loc[duomenys['atskirai_vidurkis'] <= 1 ]

[ ]
def sukurti_ivertinimas(eilute):
  if eilute['atskirai_vidurkis'] <=1:
    return 'Labai prastai'
  elif eilute['atskirai_vidurkis'] <= 2:
    return 'Prastai'
  elif eilute['atskirai_vidurkis'] <= 3:
    return 'Patenkinamai'
  elif eilute['atskirai_vidurkis'] <= 4:
    return 'Gerai'
  elif eilute['atskirai_vidurkis'] <= 5:
    return 'Labai gerai'
  else:
    return ''

duomenys['ivertinimas'] = duomenys.apply(sukurti_ivertinimas, axis = 1)
duomenys


[ ]
ivert_sk = duomenys.groupby('ivertinimas').count()['countas']
plt.pie(ivert_sk, labels=ivert_sk.keys(),autopct='%.2f%%')
plt.title('Pasiskirstymas pagal įvertinimų vidurkį')
plt.show()


[ ]
duomenys.groupby('ivertinimas').count()['countas'].sort_values(ascending=True)


[ ]
duomenys.groupby('Satisfaction').count()['countas']


[ ]
duomenys.groupby('ivertinimas').count()['countas']
neutral_or_diss = (duomenys.loc[duomenys['ivertinimas'] == 'Labai prastai'].count()['countas']) + (duomenys.loc[duomenys['ivertinimas'] == 'Prastai'].count()['countas']) + (duomenys.loc[duomenys['ivertinimas'] == 'Patenkinamai'].count()['countas'])
sat = (duomenys.loc[duomenys['ivertinimas'] == 'Gerai'].count()['countas'])+(duomenys.loc[duomenys['ivertinimas'] == 'Labai gerai'].count()['countas'])

n_or_d = duomenys.loc[duomenys['Satisfaction'] == 'Neutral or Dissatisfied'].count()['countas']
s = duomenys.loc[duomenys['Satisfaction'] == 'Satisfied'].count()['countas']

print(f"Sudėjus įvertinimus - 'Labai prastai', 'Prastai' ir 'Patenkinamai' (kurie atitinka 'Neutral or Dissatisfied'), gauname {neutral_or_diss} balsų.\nSudėjus 'Gerai' ir 'Labai gerai' įvertinimus, gauname {sat} balsų sk.")
print()
print(f"Tuo tarpu, lentelėje pažymėti įvertinimai - Neutral or Dissatisfied - gavo {n_or_d} balsų,\no - Satisfied - {s} balsų.")

Sudėjus įvertinimus - 'Labai prastai', 'Prastai' ir 'Patenkinamai' (kurie atitinka 'Neutral or Dissatisfied'), gauname 48539 balsų.
Sudėjus 'Gerai' ir 'Labai gerai' įvertinimus, gauname 81341 balsų sk.

Tuo tarpu, lentelėje pažymėti įvertinimai - Neutral or Dissatisfied - gavo 73452 balsų,
o - Satisfied - 56428 balsų.
3 - Kaip skiriasi įvertinimai keliaujant skirtinga klase?

[ ]
duomenys.groupby('Class').count()['countas']


[ ]
pagal_klase = duomenys.groupby('Class')[['amziaus_grupe', 'Gender']].value_counts().reset_index()
pagal_klase


[ ]
pagal_klase['Class'].unique()
array(['Business', 'Economy', 'Economy Plus'], dtype=object)

[ ]
klase = pagal_klase['Class'].unique()
mot_b = pagal_klase.loc[(pagal_klase['Class'] == 'Business')&(pagal_klase['Gender'] == 'Female')].sum()['count']
mot_e = pagal_klase.loc[(pagal_klase['Class'] == 'Economy')&(pagal_klase['Gender'] == 'Female')].sum()['count']
mot_ep = pagal_klase.loc[(pagal_klase['Class'] == 'Economy Plus')&(pagal_klase['Gender'] == 'Female')].sum()['count']

vyr_b = pagal_klase.loc[(pagal_klase['Class'] == 'Business')&(pagal_klase['Gender'] == 'Male')].sum()['count']
vyr_e = pagal_klase.loc[(pagal_klase['Class'] == 'Economy')&(pagal_klase['Gender'] == 'Male')].sum()['count']
vyr_ep = pagal_klase.loc[(pagal_klase['Class'] == 'Economy Plus')&(pagal_klase['Gender'] == 'Male')].sum()['count']

plt.plot(klase, [mot_b, mot_e, mot_ep], label = 'Moterys', color = 'red', marker = 's')
plt.plot(klase, [vyr_b,vyr_e,vyr_ep], label = 'Vyrai', color = 'green', marker = 's')
plt.legend()

plt.title('Vyrų ir moterų sk. pagal kalsę')

plt.show()


[ ]
# IŠVADOS
print(f"""
MOTERŲ SKAIČIUS:
biznio klasėje - {str(mot_b['count'])},
ekonominėje - {str(mot_b['count'])},
ekonominėj plus - {str(mot_ep['count'])}.
""")
print(f"""
VYRŲ SKAIČIUS:
biznio kalasėje - {str(vyr_b['count'])},
ekonominėje klasėje - {str(vyr_e['count'])},
ekonominėje plius - {str(vyr_ep['count'])}.
""")

MOTERŲ SKAIČIUS:
biznio klasėje - 31263,
ekonominėje - 31263,
ekonominėj plus - 4966.


VYRŲ SKAIČIUS:
biznio kalasėje - 30897,
ekonominėje klasėje - 28639,
ekonominėje plius - 4445.


[ ]
biznio_ivert = duomenys[['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']].loc[duomenys['Class']=='Business'].mean().to_frame('VIDURKIS').rename_axis('PASLAUGOS').reset_index()
biznio_ivert


[ ]
x = ['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']
y = biznio_ivert['VIDURKIS']
plt.plot(x, y,marker='s', color = 'purple')

plt.xticks(rotation=45, ha='right')
plt.title('Paslaugų įvertinimo vidurkis')

plt.show()


[ ]
biznio_bendras = duomenys['atskirai_vidurkis'].loc[duomenys['Class']=='Business'].mean()
biznio_bendras
3.467248292248292

[ ]
ekonomines_ivert = duomenys[['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']].loc[duomenys['Class']=='Economy'].mean().to_frame('VIDURKIS').rename_axis('PASLAUGOS').reset_index()
ekonomines_ivert


[ ]
x = ['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']
y = ekonomines_ivert['VIDURKIS']
plt.plot(x, y,marker='s', color = 'green')

plt.xticks(rotation=45, ha='right')
plt.title('Paslaugų įvertinimo vidurkis')

plt.show()


[ ]
ekonomines_bendras = duomenys['atskirai_vidurkis'].loc[duomenys['Class']=='Economy'].mean()
ekonomines_bendras
3.073762197945429

[ ]
ek_plus_ivert = duomenys[['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']].loc[duomenys['Class']=='Economy Plus'].mean().to_frame('VIDURKIS').rename_axis('PASLAUGOS').reset_index()
ek_plus_ivert


[ ]
x = ['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']
y = ekonomines_ivert['VIDURKIS']
plt.plot(x, y,marker='s', color = 'orange')

plt.xticks(rotation=45, ha='right')
plt.title('Paslaugų įvertinimo vidurkis')

plt.show()


[ ]
ek_plus_bendras = duomenys['atskirai_vidurkis'].loc[duomenys['Class']=='Economy Plus'].mean()
ek_plus_bendras
3.0671145876756336

[ ]
a = duomenys['Class'].unique()
b = [biznio_bendras, ekonomines_bendras, ek_plus_bendras]

stulp = plt.bar(a, b)
stulp[0].set_color('#c99d22')
stulp[0].set_edgecolor('black')
stulp[1].set_color('#856818')
stulp[1].set_edgecolor('black')
stulp[2].set_color('#bfa867')
stulp[2].set_edgecolor('black')

plt.title('Bendras vidurkis pagal klasę')

plt.show()


[ ]
# IŠVADOS
if biznio_bendras > ekonomines_bendras and biznio_bendras > ek_plus_bendras:
  print(f'Biznio klasė įvertinta geriausiai. Balas - {biznio_bendras:.2f}.')
if ekonomines_bendras > biznio_bendras and ekonomines_bendras > ek_plus_bendras:
  print(f'Ekonominė klasė įvertinta geriausiai. Balas - {ekonomines_bendras:.2f}.')
if ek_plus_bendras > biznio_bendras and ek_plus_bendras > ekonomines_bendras:
  prit(f'Ekonominė plius klasė įvertinta geriausiai. Balas - {ek_plus_bendras:.2f}.')
print()
if biznio_bendras < ekonomines_bendras and biznio_bendras < ek_plus_bendras:
  print(f'Biznio klasė įvertinta prasčiausiai. Balas - {biznio_bendras:.2f}.')
if ekonomines_bendras < biznio_bendras and ekonomines_bendras < ek_plus_bendras:
  print(f'Ekonominė klasė įvertinta prasčiausiai. Balas - {ekonomines_bendras:.2f}.')
if ek_plus_bendras < biznio_bendras and ek_plus_bendras < ekonomines_bendras:
  print(f'Ekonominė plius klasė įvertinta prasčiausiai. Balas - {ek_plus_bendras:.2f}.')
Biznio klasė įvertinta geriausiai. Balas - 3.47.

Ekonominė plius klasė įvertinta prasčiausiai. Balas - 3.07.
4 - Kaip skiriasis įvertinimas priklausomai nuo skrydžio trukmės?

[ ]
def sukurti_ilgis(eilute):
  if eilute['Flight Distance'] <= 270:
    return 'Labai trumpas (< 30min)'
  elif eilute['Flight Distance'] <= 800:
    return 'Trumpas (30min - 3h)'
  elif eilute['Flight Distance'] <= 2200:
    return 'Vidutinis (3-6h)'
  elif eilute['Flight Distance'] <= 6000:
    return 'Ilgas (6-12h)'
  else:
    return 'Labai ilgas (12h ir daugiau)'

duomenys['ilgis'] = duomenys.apply(sukurti_ilgis, axis=1)
duomenys

[ ]
k = duomenys.groupby('ilgis').count()['countas']
plt.pie(k, labels = k.keys(), autopct='%.2f%%')
plt.show()


[ ]
# Paslaugų įvertinimas labai trumpos trukmės skrydžių
lb_trumpas_vid = duomenys[['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']].loc[duomenys['ilgis']=='Labai trumpas (< 30min)'].mean().to_frame('VIDURKIS').rename_axis('PASLAUGOS').reset_index()
lb_trumpas_vid


[ ]
lb_trumpas_vid.reset_index(drop=True, inplace = True)
lb_trumpas_vid.to_csv('lb_trumpas_vidurkis.csv', index=False)

[ ]
lb_trumpas_min_ir_max = lb_trumpas_vid.loc[(lb_trumpas_vid['VIDURKIS']  == lb_trumpas_vid['VIDURKIS'].max()) | (lb_trumpas_vid['VIDURKIS']  == lb_trumpas_vid['VIDURKIS'].min())]
lb_trumpas_min_ir_max


[ ]
lb_trumpas_bendras = lb_trumpas_vid['VIDURKIS'].mean()
lb_trumpas_bendras
3.1341171067738225

[ ]
# Paslaugų įvertinimas trumpos trukmės skrydžių
trumpas_vid = duomenys[['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']].loc[duomenys['ilgis']=='Trumpas (30min - 3h)'].mean().to_frame('VIDURKIS').rename_axis('PASLAUGOS').reset_index()
trumpas_vid


[ ]
trumpas_vid.reset_index(drop=True, inplace = True)
trumpas_vid.to_csv('trumpas_vidurkis.csv', index=False)

[ ]
trumpas_min_ir_max = trumpas_vid.loc[(trumpas_vid['VIDURKIS']  == trumpas_vid['VIDURKIS'].max()) | (trumpas_vid['VIDURKIS']  == trumpas_vid['VIDURKIS'].min())]
trumpas_min_ir_max


[ ]
trumpas_bendras = trumpas_vid['VIDURKIS'].mean()
trumpas_bendras
3.1873915937235284

[ ]
# Paslaugų įvertinimas vidutinės trukmės skrydžių
vidutinis_vid = duomenys[['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']].loc[duomenys['ilgis']=='Vidutinis (3-6h)'].mean().to_frame('VIDURKIS').rename_axis('PASLAUGOS').reset_index()
vidutinis_vid


[ ]
vidutinis_vid.reset_index(drop=True, inplace = True)
vidutinis_vid.to_csv('vidutinis_vidurkis.csv', index=False)

[ ]
vidutinis_min_ir_max = vidutinis_vid.loc[(vidutinis_vid['VIDURKIS']  == vidutinis_vid['VIDURKIS'].max()) | (vidutinis_vid['VIDURKIS']  == vidutinis_vid['VIDURKIS'].min())]
vidutinis_min_ir_max


[ ]
vidutinis_bendras = vidutinis_vid['VIDURKIS'].mean()
vidutinis_bendras
3.282744377511449

[ ]
# Paslaugų įvertinimas ilgos trukmės skrydžių
ilgas_vid = duomenys[['Departure and Arrival Time Convenience', 'Ease of Online Booking', 'Check-in Service', 'Online Boarding', 'On-board Service', 'Seat Comfort', 'Leg Room Service', 'Cleanliness', 'Food and Drink', 'In-flight Service', 'In-flight Wifi Service', 'In-flight Entertainment', 'Baggage Handling']].loc[duomenys['ilgis']=='Ilgas (6-12h)'].mean().to_frame('VIDURKIS').rename_axis('PASLAUGOS').reset_index()
ilgas_vid


[ ]
ilgas_vid.reset_index(drop=True, inplace = True)
ilgas_vid.to_csv('ilgas_vidurkis.csv', index=False)

[ ]
ilgas_min_ir_max = ilgas_vid.loc[(ilgas_vid['VIDURKIS']  == ilgas_vid['VIDURKIS'].max()) | (ilgas_vid['VIDURKIS']  == ilgas_vid['VIDURKIS'].min())]
ilgas_min_ir_max


[ ]
ilgas_bendras = ilgas_vid['VIDURKIS'].mean()
ilgas_bendras
3.4576376106223674

[ ]
c = duomenys['ilgis'].unique()
d = [vidutinis_bendras,ilgas_bendras, trumpas_bendras,lb_trumpas_bendras]
bar = plt.bar(c, d)

bar[0].set_color('#0f8a6b')
bar[0].set_edgecolor('black')
bar[1].set_color('#4bface')
bar[1].set_edgecolor('black')
bar[2].set_color('#11d1a1')
bar[2].set_edgecolor('black')
bar[3].set_color('#80c2b2')
bar[3].set_edgecolor('black')


plt.xticks(rotation=30, ha='right')
plt.title('Bendras vidurkis pagal skrydžio trukmę')

plt.show()


[ ]
# IŠVADOS
if lb_trumpas_bendras > trumpas_bendras and lb_trumpas_bendras > vidutinis_bendras and lb_trumpas_bendras > ilgas_bendras:
  print(f'Labai trumpos trukmės skrydžiai (iki 30min) įvertinti geriausiai. Balas - {lb_trumpas_bendras:.2f}.')
if trumpas_bendras > lb_trumpas_bendras and trumpas_bendras > vidutinis_bendras and trumpas_bendras > ilgas_bendras:
  print(f'Trumpos trukmės skrydžiai (30min - 3h) įvertinti geriausiai. Balas - {trumpas_bendras:.2f}.')
if vidutinis_bendras > lb_trumpas_bendras and vidutinis_bendras > trumpas_bendras and vidutinis_bendras > ilgas_bendras:
  print(f'Vidutinės trukmės skrydžiai (3-6h) įvertinti geriausiai. Balas - {vidutinis_bendras:.2f}.')
if ilgas_bendras > lb_trumpas_bendras and ilgas_bendras > trumpas_bendras and ilgas_bendras > vidutinis_bendras:
  print(f'Ilgos trukmės skrydžiai (6-12h) įvertinti geriausiai. Balas - {ilgas_bendras:.2f}.')

print()
if lb_trumpas_bendras < trumpas_bendras and lb_trumpas_bendras < vidutinis_bendras and lb_trumpas_bendras < ilgas_bendras:
  print(f'Labai trumpos trukmės skrydžiai (iki 30min) įvertinti prasčiausiai. Balas - {lb_trumpas_bendras:.2f}.')
if trumpas_bendras < lb_trumpas_bendras and trumpas_bendras < vidutinis_bendras and trumpas_bendras < ilgas_bendras:
  print(f'Trumpos trukmės skrydžiai (30min - 3h) įvertinti prasčiausiai. Balas - {trumpas_bendras:.2f}.')
if vidutinis_bendras < lb_trumpas_bendras and vidutinis_bendras < trumpas_bendras and vidutinis_bendras < ilgas_bendras:
  print(f'Vidutinės trukmės skrydžiai (3-6h) įvertinti prasčiausiai. Balas - {vidutinis_bendras:.2f}.')
if ilgas_bendras < lb_trumpas_bendras and ilgas_bendras < trumpas_bendras and ilgas_bendras < vidutinis_bendras:
  print(f'Ilgos trukmės skrydžiai (6-12h) įvertinti prasčiausiai. Balas - {ilgas_bendras:.2f}.')

Ilgos trukmės skrydžiai (6-12h) įvertinti geriausiai. Balas - 3.46.

Labai trumpos trukmės skrydžiai (iki 30min) įvertinti prasčiausiai. Balas - 3.13.
5 - Klientai pagal kelionės tikslą bei tipą

[ ]
duomenys.groupby('Type of Travel').count()['countas']


[ ]
duomenys.groupby('Customer Type').count()['countas']



[ ]
bzn_buve = duomenys['Customer Type'].loc[(duomenys['Type of Travel'] == 'Business') & (duomenys['Customer Type'] == 'Returning')].count()
bzn_buve
66114

[ ]
bzn_nauji = duomenys['Customer Type'].loc[(duomenys['Type of Travel'] == 'Business') & (duomenys['Customer Type'] == 'First-time')].count()
bzn_nauji
23579

[ ]
pers_buve = duomenys['Customer Type'].loc[(duomenys['Type of Travel'] == 'Personal') & (duomenys['Customer Type'] == 'Returning')].count()
pers_buve
39986

[ ]
pers_nauji = duomenys['Customer Type'].loc[(duomenys['Type of Travel'] == 'Personal') & (duomenys['Customer Type'] == 'First-time')].count()
pers_nauji
201

[ ]
import numpy as np
d = duomenys['Customer Type'].unique()
g = duomenys.loc[duomenys['Type of Travel'] == 'Business'].groupby('Customer Type').count()['countas']
h = duomenys.loc[duomenys['Type of Travel'] == 'Personal'].groupby('Customer Type').count()['countas']

d = np.arange(2)
width=0.25

plt.bar(d, g, width = width, edgecolor='black', label='Darbo reikalai', color = '#bf718c', tick_label = ['First-time', 'Returning'])
plt.bar(d+width, h, width=width, edgecolor='black', label='Asmeniniai', color = '#824b5e',linewidth=3)

plt.legend()
plt.title('Kelionės tikslas pagal kliento tipą')
plt.show()



[ ]
# IŠVADOS
print(f"""
Pirmą kartą keliaujantys oro liniją renkasi:
darbo reikalams - {bzn_nauji} keleiviai,
asmeniniams reikalams - {pers_nauji}.
""")
print()
print(f"""
Sugrįžtantys keleiviai skrenda:
darbo reikalais - {bzn_buve},
asmeniniais - {pers_buve}.
""")

Pirmą kartą keliaujantys oro liniją renkasi:
darbo reikalams - 23579 keleiviai,
asmeniniams reikalams - 201.



Sugrįžtantys keleiviai skrenda:
darbo reikalais - 66114,
asmeniniais - 39986.


[ ]
grizta_bzn = duomenys.loc[(duomenys['Customer Type'] == 'Returning')&(duomenys['Type of Travel'] == 'Business')].groupby('Class').count()['countas']
grizta_bzn


[ ]
grizta_asm = duomenys.loc[(duomenys['Customer Type'] == 'Returning')&(duomenys['Type of Travel'] == 'Personal')].groupby('Class').count()['countas']
grizta_asm


[ ]
pirma_bzn = duomenys.loc[(duomenys['Customer Type'] == 'First-time')&(duomenys['Type of Travel'] == 'Business')].groupby('Class').count()['countas']
pirma_bzn


[ ]
pirma_asm = duomenys.loc[(duomenys['Customer Type'] == 'First-time')&(duomenys['Type of Travel'] == 'Personal')].groupby('Class').count()['countas']
pirma_asm


[ ]
import numpy as np
# d = duomenys['Customer Type'].unique()
j = duomenys['Class'].unique()
k = duomenys.loc[(duomenys['Customer Type'] == 'Returning')&(duomenys['Type of Travel'] == 'Business')].groupby('Class').count()['countas']
l = duomenys.loc[(duomenys['Customer Type'] == 'First-time')&(duomenys['Type of Travel'] == 'Business')].groupby('Class').count()['countas']
m = duomenys.loc[(duomenys['Customer Type'] == 'Returning')&(duomenys['Type of Travel'] == 'Personal')].groupby('Class').count()['countas']
p = duomenys.loc[(duomenys['Customer Type'] == 'First-time')&(duomenys['Type of Travel'] == 'Personal')].groupby('Class').count()['countas']

j = np.arange(3)
width=0.2

plt.bar(j-0.6, k, width=width,edgecolor='black', label='Darbo, sugrįžtantys', color = '#de4437', tick_label = ['Economy Plus', 'Economy', 'Business'])
plt.bar(j-0.4, l, width=width, edgecolor='black', label='Darbo, pirmą kartą', color = '#d19692')
plt.bar(j-0.2, m, width=width, edgecolor='black', label='Asmeninis, sugrįžtantys', color = '#7d4743')
plt.bar(j, p, width=width, edgecolor='black', label='Asmeninis, pirmą kartą', color = 'black',linewidth=4)

plt.legend()
plt.title('Klasės pasirinkimas pagal kliento tipą ir kelionės tikslą')
plt.show()
